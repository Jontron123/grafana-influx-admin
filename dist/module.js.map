{"version":3,"sources":["../src/module.js"],"names":["config","appEvents","PanelCtrl","_","moment","InfluxAdminCtrl","$scope","$injector","$q","$rootScope","$timeout","datasourceSrv","get","injector","q","query","events","on","onInitEditMode","bind","onRender","onPanelInitalized","onRefresh","dbs","forEach","datasources","val","key","type","defaultDatasource","unshift","push","isNil","panel","datasource","length","addEditorTab","editorTabIndex","console","log","qinfo","emit","title","text","text2","icon","confirmText","yesText","onConfirm","then","ds","_seriesQuery","id","res","data","rsp","currentQueries","results","series","values","durr","unit","mag","secs","parseInt","substring","templateUrl"],"mappings":"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","file":"module.js","sourcesContent":["import config from 'app/core/config';\nimport appEvents from 'app/core/app_events';\n\nimport {PanelCtrl} from  'app/plugins/sdk';\n\nimport _ from 'lodash';\nimport moment from 'moment';\n\n\nclass InfluxAdminCtrl extends PanelCtrl {\n  constructor($scope, $injector, $q, $rootScope, $timeout) {\n    super($scope, $injector);\n    this.datasourceSrv = $injector.get('datasourceSrv');\n    this.injector = $injector;\n    this.q = $q;\n    this.query = \"SHOW DIAGNOSTICS\";\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('panel-initialized', this.onPanelInitalized.bind(this));\n    this.events.on('refresh', this.onRefresh.bind(this));\n  \n    \n    // All influxdb datasources\n    this.dbs = [];\n    _.forEach(config.datasources, (val, key) => {\n      if (\"influxdb\" == val.type) {\n        if(key == config.defaultDatasource) {\n          this.dbs.unshift(key);\n        }\n        else {\n          this.dbs.push(key);\n        }\n      }\n    });\n\n    // pick a datasource\n    if( _.isNil( this.panel.datasource ) ) {\n      if(this.dbs.length > 0) {\n        this.panel.datasource = this.dbs[0];\n      }\n    }\n  }\n\n\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/natel-influx-admin/editor.html',1);\n    this.editorTabIndex = 1;\n  }\n\n  setQuery(q) {\n    this.query = q;\n\n    console.log(\"Set Query: \", q)\n  }\n\n  askToKillQuery(qinfo) {\n    appEvents.emit('confirm-modal', {\n      title: 'Kill Influx Query',\n      text: 'Are you sure you want to kill this query?',\n      text2: qinfo.query,\n      icon: 'fa-trash',\n      confirmText: 'yes',\n      yesText: 'Kill Query',\n      onConfirm: () => {\n        this.datasourceSrv.get(this.panel.datasource).then( (ds) => {\n          ds._seriesQuery( 'kill query '+qinfo.id ).then( (res) => {\n            console.log( 'killed', qinfo, res );\n          });\n        });\n      }\n    });\n    return;\n  }\n\n  onSubmit() {\n    this.datasourceSrv.get(this.panel.datasource).then( (ds) => {\n      console.log( 'ds', ds, this.query);\n      ds._seriesQuery( this.query ).then((data) => {\n        console.log(\"RSP\", this.query, data);\n        this.rsp = data;\n      });\n\n      ds._seriesQuery( 'SHOW QUERIES' ).then((data) => {\n\n        this.currentQueries = [];\n        // convert the time (string) to seconds\n        _.forEach(data.results[0].series[0].values, (res) => {\n          let durr = res[3];\n          let unit = durr[durr.length - 1];\n          let mag = 0;\n          if(unit=='s') {\n            mag = 1;\n          }\n          else if(unit=='m') {\n            mag = 60;\n          }\n          else if(unit=='h') {\n            mag = 60*60;\n          }\n          let secs = parseInt( durr.substring(0,durr.length-1)) * mag;\n\n          this.currentQueries.push( {\n            'secs': secs,\n            'query': res[1],\n            'db': res[2],\n            'id': res[0]\n          });\n        });\n\n        console.log(\"QUERIES\", this.currentQueries);\n      });\n    });\n  }\n\n  onPanelInitalized() {\n    console.log(\"onPanelInitalized()\")\n  }\n\n  onRender() {\n    console.log(\"onRender\");\n  }\n\n  onRefresh() {\n    console.log(\"onRefresh\");\n  }\n}\nInfluxAdminCtrl.templateUrl = 'module.html';\n\nexport {\n  InfluxAdminCtrl as PanelCtrl\n};\n\n\n"]}