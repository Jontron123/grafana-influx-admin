{"version":3,"sources":["../src/module.js"],"names":["config","appEvents","PanelCtrl","_","moment","InfluxAdminCtrl","$scope","$injector","$q","$rootScope","$timeout","datasourceSrv","get","injector","q","query","events","on","onInitEditMode","bind","onRender","onPanelInitalized","onRefresh","defaults","mode","updateEvery","panel","$","extend","dbs","forEach","datasources","val","key","type","defaultDatasource","unshift","push","isNil","datasource","length","queryInfo","last","count","queries","updateShowQueries","addEditorTab","editorTabIndex","console","log","qinfo","emit","title","text","text2","icon","yesText","onConfirm","then","ds","_seriesQuery","id","res","data","temp","results","series","values","durr","unit","mag","secs","parseInt","substring","Date","now","currentQueries","timer","Promise","resolve","render","click","rsp","templateUrl"],"mappings":"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","file":"module.js","sourcesContent":["import config from 'app/core/config';\nimport appEvents from 'app/core/app_events';\n\nimport {PanelCtrl} from  'app/plugins/sdk';\n\nimport _ from 'lodash';\nimport moment from 'moment';\n\n\nclass InfluxAdminCtrl extends PanelCtrl {\n  constructor($scope, $injector, $q, $rootScope, $timeout) {\n    super($scope, $injector);\n    this.datasourceSrv = $injector.get('datasourceSrv');\n    this.injector = $injector;\n    this.q = $q;\n    this.query = \"SHOW DIAGNOSTICS\";\n    this.$timeout = $timeout;\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('panel-initialized', this.onPanelInitalized.bind(this));\n    this.events.on('refresh', this.onRefresh.bind(this));\n  \n\n    // defaults configs\n    var defaults = {\n      mode: 'current', // 'write', 'query'\n      updateEvery: 1100\n    };\n    this.panel = $.extend(true, defaults, this.panel );\n    \n    // All influxdb datasources\n    this.dbs = [];\n    _.forEach(config.datasources, (val, key) => {\n      if (\"influxdb\" == val.type) {\n        if(key == config.defaultDatasource) {\n          this.dbs.unshift(key);\n        }\n        else {\n          this.dbs.push(key);\n        }\n      }\n    });\n\n    // pick a datasource\n    if( _.isNil( this.panel.datasource ) ) {\n      if(this.dbs.length > 0) {\n        this.panel.datasource = this.dbs[0];\n      }\n    }\n\n    this.queryInfo = {\n      last: 0,\n      count: 0,\n      queries: []\n    };\n\n    if(this.panel.updateEvery > 0) {\n      this.updateShowQueries();\n    }\n  }\n\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/natel-influx-admin/editor.html',1);\n    this.editorTabIndex = 1;\n  }\n\n  setQuery(q) {\n    this.query = q;\n\n    console.log(\"Set Query: \", q)\n  }\n\n  askToKillQuery(qinfo) {\n    appEvents.emit('confirm-modal', {\n      title: 'Kill Influx Query',\n      text: 'Are you sure you want to kill this query?',\n      text2: qinfo.query,\n      icon: 'fa-trash',\n      //confirmText: 'yes',\n      yesText: 'Kill Query',\n      onConfirm: () => {\n        this.datasourceSrv.get(this.panel.datasource).then( (ds) => {\n          ds._seriesQuery( 'kill query '+qinfo.id ).then( (res) => {\n            console.log( 'killed', qinfo, res );\n          });\n        });\n      }\n    });\n    return;\n  }\n\n  updateShowQueries() {\n    return this.datasourceSrv.get(this.panel.datasource).then( (ds) => {\n      return ds._seriesQuery( 'SHOW QUERIES' ).then((data) => {\n        var temp = [];\n        _.forEach(data.results[0].series[0].values, (res) => {\n\n          // convert the time (string) to seconds (so that sort works!)\n          let durr = res[3];\n          let unit = durr[durr.length - 1];\n          let mag = 0;\n          if(unit=='s') {\n            mag = 1;\n          }\n          else if(unit=='m') {\n            mag = 60;\n          }\n          else if(unit=='h') {\n            mag = 60*60;\n          }\n          let secs = parseInt( durr.substring(0,durr.length-1)) * mag;\n\n          temp.push( {\n            'secs': secs,\n            'time': res[3],\n            'query': res[1],\n            'db': res[2],\n            'id': res[0]\n          });\n        });\n\n        this.queryInfo.count++;\n        this.queryInfo.last = Date.now();\n        this.queryInfo.queries = temp;\n        console.log(\"QUERIES\", this.currentQueries);\n\n        // Check if we should refresh the view\n        if( 'current' == this.panel.mode && this.panel.updateEvery>0 ) {\n          this.queryInfo.timer = this.$timeout( () => {\n            this.updateShowQueries()\n          }, this.panel.updateEvery);\n        }\n        return Promise.resolve(temp);\n      });\n    });\n  }\n\n  modeChanged() {\n    if('current' == this.panel.mode) {\n      this.updateShowQueries();\n    }\n    this.render();\n  }\n\n  getQueryTemplates() {\n    return [\n      { text: 'Show Databases', click: \"ctrl.setQuery('SHOW DATABASES')\" },\n      { text: 'Create Database', click: \"ctrl.setQuery('CREATE DATABASE &quot;db_name&quot;')\" },\n      { text: 'Drop Database', click: \"ctrl.setQuery('DROP DATABASE &quot;db_name&quot;')\" },\n      { text: '--' },\n      { text: 'Show Measurements', click: \"ctrl.setQuery('SHOW MEASUREMENTS')\" },\n      { text: 'Show Tag Keys', click: \"ctrl.setQuery('SHOW TAG KEYS FROM &quot;measurement_name&quot;')\" },\n      { text: 'Show Tag Values', click: \"ctrl.setQuery('SHOW TAG VALUES FROM &quot;measurement_name&quot; WITH KEY = &quot;tag_key&quot;')\" },\n      { text: '--' },\n      { text: 'Show Retention Policies', click: \"ctrl.setQuery('SHOW RETENTION POLICIES ON &quot;db_name&quot;')\" },\n      { text: 'Create Retention Policy', click: \"ctrl.setQuery('CREATE RETENTION POLICY &quot;rp_name&quot; ON &quot;db_name&quot; DURATION 30d REPLICATION 1 DEFAULT')\" },\n      { text: 'Drop Retention Policy', click: \"ctrl.setQuery('DROP RETENTION POLICY &quot;rp_name&quot; ON &quot;db_name&quot;')\" },\n      { text: '--' },\n      { text: 'Show Continuous Queries', click: \"ctrl.setQuery('SHOW CONTINUOUS QUERIES')\" },\n      { text: 'Create Continuous Query', click: \"ctrl.setQuery('CREATE CONTINUOUS QUERY &quot;cq_name&quot; ON &quot;db_name&quot; BEGIN SELECT min(&quot;field&quot;) INTO &quot;target_measurement&quot; FROM &quot;current_measurement&quot; GROUP BY time(30m) END')\" },\n      { text: 'Drop Continuous Query', click: \"ctrl.setQuery('DROP CONTINUOUS QUERY &quot;cq_name&quot; ON &quot;db_name&quot;')\" },\n      { text: '--' },\n      { text: 'Show Users', click: \"ctrl.setQuery('SHOW USERS')\" },\n      { text: 'Create User', click: \"ctrl.setQuery('CREATE USER &quot;username&quot; WITH PASSWORD 'password'')\" },\n      { text: 'Create Admin User', click: \"ctrl.setQuery('CREATE USER &quot;username&quot; WITH PASSWORD 'password' WITH ALL PRIVILEGES')\" },\n      { text: 'Drop User', click: \"ctrl.setQuery('DROP USER &quot;username&quot;')\" },\n      { text: '--' },\n      { text: 'Show Stats', click: \"ctrl.setQuery('SHOW STATS')\" },\n      { text: 'Show Diagnostics', click: \"ctrl.setQuery('SHOW DIAGNOSTICS')\" }\n    ];\n  }\n\n  onSubmit() {\n    this.datasourceSrv.get(this.panel.datasource).then( (ds) => {\n      console.log( 'ds', ds, this.query);\n      ds._seriesQuery( this.query ).then((data) => {\n        console.log(\"RSP\", this.query, data);\n        this.rsp = data;\n      });\n    });\n  }\n\n  onPanelInitalized() {\n    console.log(\"onPanelInitalized()\")\n  }\n\n  onRender() {\n    console.log(\"onRender\");\n  }\n\n  onRefresh() {\n    if( 'current' == this.panel.mode ) {\n      this.updateShowQueries();\n    }\n    console.log(\"onRefresh\");\n  }\n}\nInfluxAdminCtrl.templateUrl = 'module.html';\n\nexport {\n  InfluxAdminCtrl as PanelCtrl\n};\n\n\n"]}