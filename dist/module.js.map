{"version":3,"sources":["../src/module.js"],"names":["config","appEvents","PanelCtrl","_","moment","InfluxAdminCtrl","$scope","$injector","$q","$rootScope","$timeout","$http","datasourceSrv","get","injector","q","events","on","onInitEditMode","bind","onRender","onPanelInitalized","onRefresh","writing","defaults","mode","query","updateEvery","$","extend","panel","dbs","forEach","datasources","val","key","type","defaultDatasource","unshift","push","isNil","datasource","length","queryInfo","last","count","queries","updateShowQueries","addEditorTab","editorTabIndex","console","log","writeDataText","error","then","ds","url","urls","database","method","data","headers","rsp","err","status","qinfo","emit","title","text","text2","icon","yesText","onConfirm","_seriesQuery","id","res","db","temp","results","series","values","durr","unit","mag","secs","parseInt","substring","lastId","Date","now","isShowCurrentQueries","timer","render","click","startsWith","onSubmit","str","split","startTime","runningQuery","queryTime","message","templateUrl"],"mappings":"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","file":"module.js","sourcesContent":["import config from 'app/core/config';\r\nimport appEvents from 'app/core/app_events';\r\n\r\nimport {PanelCtrl} from  'app/plugins/sdk';\r\n\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\n\r\n\r\nclass InfluxAdminCtrl extends PanelCtrl {\r\n  constructor($scope, $injector, $q, $rootScope, $timeout, $http) {\r\n    super($scope, $injector);\r\n    this.datasourceSrv = $injector.get('datasourceSrv');\r\n    this.injector = $injector;\r\n    this.q = $q;\r\n    this.$timeout = $timeout;\r\n    this.$http = $http;\r\n\r\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n    this.events.on('render', this.onRender.bind(this));\r\n    this.events.on('panel-initialized', this.onPanelInitalized.bind(this));\r\n    this.events.on('refresh', this.onRefresh.bind(this));\r\n\r\n    this.writing = false;\r\n\r\n    // defaults configs\r\n    var defaults = {\r\n      mode: 'current', // 'write', 'query'\r\n      query: 'SHOW DIAGNOSTICS',\r\n      updateEvery: 1200\r\n    };\r\n    $.extend(true, defaults, this.panel );\r\n\r\n\r\n    // All influxdb datasources\r\n    this.dbs = [];\r\n    _.forEach(config.datasources, (val, key) => {\r\n      if (\"influxdb\" == val.type) {\r\n        if(key == config.defaultDatasource) {\r\n          this.dbs.unshift(key);\r\n        }\r\n        else {\r\n          this.dbs.push(key);\r\n        }\r\n      }\r\n    });\r\n\r\n    // pick a datasource\r\n    if( _.isNil( this.panel.datasource ) ) {\r\n      if(this.dbs.length > 0) {\r\n        this.panel.datasource = this.dbs[0];\r\n      }\r\n    }\r\n\r\n    this.queryInfo = {\r\n      last: 0,\r\n      count: 0,\r\n      queries: []\r\n    };\r\n\r\n    if(this.panel.updateEvery > 0) {\r\n      this.updateShowQueries();\r\n    }\r\n  }\r\n\r\n\r\n  isShowQueryWindow() {\r\n    return this.panel.mode == 'query';\r\n  }\r\n\r\n  isShowCurrentQueries() {\r\n    return this.panel.mode == 'current';\r\n  }\r\n\r\n  onInitEditMode() {\r\n    this.addEditorTab('Options', 'public/plugins/natel-influx-admin-panel/editor.html',1);\r\n    this.addEditorTab('Write Data', 'public/plugins/natel-influx-admin-panel/write.html',2);\r\n    this.editorTabIndex = 1;\r\n  }\r\n\r\n  writeData() {\r\n    console.log( \"WRITE\", this.writeDataText );\r\n    this.writing = true;\r\n    this.error = null;\r\n    return this.datasourceSrv.get(this.panel.datasource).then( (ds) => {\r\n      this.$http({\r\n        url: ds.urls[0] + '/write?db=' + ds.database,\r\n        method: 'POST',\r\n        data: this.writeDataText,\r\n        headers: {\r\n          \"Content-Type\": \"plain/text\"\r\n        }\r\n      }).then((rsp) => {\r\n        this.writing = false;\r\n        console.log( \"OK\", rsp );\r\n      }, err => {\r\n        this.writing = false;\r\n        console.log( \"ERROR\", err );\r\n        this.error = err.data.error + \" [\"+err.status+\"]\";\r\n      });\r\n    });\r\n  }\r\n\r\n  askToKillQuery(qinfo) {\r\n    appEvents.emit('confirm-modal', {\r\n      title: 'Kill Influx Query',\r\n      text: 'Are you sure you want to kill this query?',\r\n      text2: qinfo.query,\r\n      icon: 'fa-trash',\r\n      //confirmText: 'yes',\r\n      yesText: 'Kill Query',\r\n      onConfirm: () => {\r\n        this.datasourceSrv.get(this.panel.datasource).then( (ds) => {\r\n          ds._seriesQuery( 'kill query '+qinfo.id ).then( (res) => {\r\n            console.log( 'killed', qinfo, res );\r\n          });\r\n        });\r\n      }\r\n    });\r\n    return;\r\n  }\r\n\r\n  updateShowQueries() {\r\n    this.datasourceSrv.get(this.panel.datasource).then( (ds) => {\r\n      this.db = ds;\r\n      ds._seriesQuery( 'SHOW QUERIES' ).then( (data) => {\r\n        var temp = [];\r\n        _.forEach(data.results[0].series[0].values, (res) => {\r\n\r\n          // convert the time (string) to seconds (so that sort works!)\r\n          let durr = res[3];\r\n          let unit = durr[durr.length - 1];\r\n          let mag = 0;\r\n          if(unit=='s') {\r\n            mag = 1;\r\n          }\r\n          else if(unit=='m') {\r\n            mag = 60;\r\n          }\r\n          else if(unit=='h') {\r\n            mag = 60*60;\r\n          }\r\n          let secs = parseInt( durr.substring(0,durr.length-1)) * mag;\r\n          if(secs == 0 && 'SHOW QUERIES' == res[1]) {\r\n            // Don't include the current query\r\n            this.queryInfo.lastId = res[0];\r\n          }\r\n          else {\r\n            temp.push( {\r\n              'secs': secs,\r\n              'time': res[3],\r\n              'query': res[1],\r\n              'db': res[2],\r\n              'id': res[0]\r\n            });\r\n          }\r\n        });\r\n\r\n        this.queryInfo.count++;\r\n        this.queryInfo.last = Date.now();\r\n        this.queryInfo.queries = temp;\r\n\r\n        // Check if we should refresh the view\r\n        if( this.isShowCurrentQueries() && this.panel.updateEvery>0 ) {\r\n          this.queryInfo.timer = this.$timeout( () => {\r\n            this.updateShowQueries()\r\n          }, this.panel.updateEvery);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  configChanged() {\r\n    this.error = null;\r\n    this.db = ds;\r\n    if( this.isShowCurrentQueries() ) {\r\n      this.updateShowQueries();\r\n    }\r\n    this.render();\r\n  }\r\n\r\n  getQueryTemplates() {\r\n    return [\r\n      { text: 'Show Databases',  click: \"ctrl.panel.query = 'SHOW DATABASES'\" },\r\n      { text: 'Create Database', click: \"ctrl.panel.query = 'CREATE DATABASE &quot;db_name&quot;'\" },\r\n      { text: 'Drop Database',   click: \"ctrl.panel.query = 'DROP DATABASE &quot;db_name&quot;'\" },\r\n      { text: '--' },\r\n      { text: 'Show Measurements', click: \"ctrl.panel.query = 'SHOW MEASUREMENTS'\" },\r\n      { text: 'Show Field Keys',   click: \"ctrl.panel.query = 'SHOW FIELD KEYS FROM &quot;measurement_name&quot;'\" },\r\n      { text: 'Show Tag Keys',     click: \"ctrl.panel.query = 'SHOW TAG KEYS FROM &quot;measurement_name&quot;'\" },\r\n      { text: 'Show Tag Values',   click: \"ctrl.panel.query = 'SHOW TAG VALUES FROM &quot;measurement_name&quot; WITH KEY = &quot;tag_key&quot;'\" },\r\n      { text: 'Drop Measurement',  click: \"ctrl.panel.query = 'DROP MEASUREMENT &quot;measurement_name&quot;'\" },\r\n      { text: '--' },\r\n      { text: 'Show Retention Policies', click: \"ctrl.panel.query = 'SHOW RETENTION POLICIES ON &quot;db_name&quot;'\" },\r\n      { text: 'Create Retention Policy', click: \"ctrl.panel.query = 'CREATE RETENTION POLICY &quot;rp_name&quot; ON &quot;db_name&quot; DURATION 30d REPLICATION 1 DEFAULT'\" },\r\n      { text: 'Drop Retention Policy',   click: \"ctrl.panel.query = 'DROP RETENTION POLICY &quot;rp_name&quot; ON &quot;db_name&quot;'\" },\r\n      { text: '--' },\r\n      { text: 'Show Continuous Queries', click: \"ctrl.panel.query = 'SHOW CONTINUOUS QUERIES'\" },\r\n      { text: 'Create Continuous Query', click: \"ctrl.panel.query = 'CREATE CONTINUOUS QUERY &quot;cq_name&quot; ON &quot;db_name&quot; BEGIN SELECT min(&quot;field&quot;) INTO &quot;target_measurement&quot; FROM &quot;current_measurement&quot; GROUP BY time(30m) END'\" },\r\n      { text: 'Drop Continuous Query',   click: \"ctrl.panel.query = 'DROP CONTINUOUS QUERY &quot;cq_name&quot; ON &quot;db_name&quot;'\" },\r\n      { text: '--' },\r\n      { text: 'Show Users',        click: \"ctrl.panel.query = 'SHOW USERS'\" },\r\n  //  { text: 'Create User',       click: \"ctrl.query = 'CREATE USER &quot;username&quot; WITH PASSWORD &apos;password&apos;\" },\r\n  //  { text: 'Create Admin User', click: \"ctrl.query = 'CREATE USER &quot;username&quot; WITH PASSWORD 'password' WITH ALL PRIVILEGES\" },\r\n      { text: 'Drop User',         click: \"ctrl.panel.query = 'DROP USER &quot;username&quot;'\" },\r\n      { text: '--' },\r\n      { text: 'Show Stats',       click: \"ctrl.panel.query = 'SHOW STATS'\" },\r\n      { text: 'Show Diagnostics', click: \"ctrl.panel.query = 'SHOW DIAGNOSTICS'\" }\r\n    ];\r\n  }\r\n\r\n  isClickableQuery() {\r\n    if( \"SHOW MEASUREMENTS\" == this.panel.query) {\r\n      return true;\r\n    }\r\n    if( this.panel.query.startsWith( 'SHOW FIELD KEYS FROM \"')) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  onClickedResult(res) {\r\n    if( \"SHOW MEASUREMENTS\" == this.panel.query) {\r\n      this.panel.query = 'SHOW FIELD KEYS FROM \"' + res[0] +'\"';\r\n      this.onSubmit();\r\n    }\r\n    else if( this.panel.query.startsWith( 'SHOW FIELD KEYS FROM \"')) {\r\n      var str = this.panel.query.split(/\"/)[1];\r\n      this.panel.query = 'SELECT \"' + res[0] +'\" FROM \"' + str +'\" ORDER BY time desc LIMIT 10';\r\n      this.onSubmit();\r\n    }\r\n    return;\r\n  }\r\n\r\n  onSubmit() {\r\n    var startTime = Date.now();\r\n    this.error = null;\r\n    this.runningQuery = true;\r\n    this.datasourceSrv.get(this.panel.datasource).then( (ds) => {\r\n      //console.log( 'ds', ds, this.query);\r\n      this.db = ds;\r\n      ds._seriesQuery( this.panel.query ).then((data) => {\r\n       // console.log(\"RSP\", this.query, data);\r\n        this.rsp = data;\r\n        this.runningQuery = false;\r\n        this.queryTime = (Date.now() - startTime) / 1000.0;\r\n      }, (err) => {\r\n       // console.log( 'ERROR with series query', err );\r\n        this.runningQuery = false;\r\n        this.error = err.message;\r\n        this.queryTime = (Date.now() - startTime) / 1000.0;\r\n      });\r\n    });\r\n  }\r\n\r\n  onPanelInitalized() {\r\n    //console.log(\"onPanelInitalized()\")\r\n    this.onSubmit();\r\n  }\r\n\r\n  onRender() {\r\n    //console.log(\"onRender\");\r\n  }\r\n\r\n  onRefresh() {\r\n    if( this.isShowCurrentQueries() ) {\r\n      this.updateShowQueries();\r\n    }\r\n    //console.log(\"onRefresh\");\r\n  }\r\n}\r\nInfluxAdminCtrl.templateUrl = 'module.html';\r\n\r\nexport {\r\n  InfluxAdminCtrl as PanelCtrl\r\n};\r\n\r\n\r\n"]}