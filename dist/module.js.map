{"version":3,"sources":["../src/module.js"],"names":["config","appEvents","PanelCtrl","_","moment","InfluxAdminCtrl","$scope","$injector","$q","$rootScope","$timeout","$http","uiSegmentSrv","datasourceSrv","get","injector","q","events","on","onInitEditMode","bind","onRender","onPanelInitalized","onRefresh","writing","defaults","mode","query","options","database","updateEvery","panel","dbs","forEach","datasources","val","key","type","defaultDatasource","unshift","push","isNil","datasource","length","txt","dbSeg","newSegment","value","queryInfo","last","count","queries","updateShowQueries","addEditorTab","editorTabIndex","console","log","writeDataText","error","then","ds","db","url","urls","method","data","headers","rsp","err","status","qinfo","emit","title","text","text2","icon","yesText","onConfirm","_seriesQuery","id","res","temp","results","series","values","durr","unit","mag","secs","parseInt","substring","lastId","Date","now","isShowCurrentQueries","timer","configChanged","onSubmit","metricFindQuery","segs","click","startsWith","dbChanged","str","split","$event","keyCode","which","startTime","runningQuery","queryTime","message","templateUrl"],"mappings":"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","file":"module.js","sourcesContent":["import config from 'app/core/config';\nimport appEvents from 'app/core/app_events';\n\nimport {PanelCtrl} from  'app/plugins/sdk';\n\nimport _ from 'lodash';\nimport moment from 'moment';\n\n\nclass InfluxAdminCtrl extends PanelCtrl {\n  constructor($scope, $injector, $q, $rootScope, $timeout, $http, uiSegmentSrv) {\n    super($scope, $injector);\n    this.datasourceSrv = $injector.get('datasourceSrv');\n    this.injector = $injector;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.q = $q;\n    this.$timeout = $timeout;\n    this.$http = $http;\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('panel-initialized', this.onPanelInitalized.bind(this));\n    this.events.on('refresh', this.onRefresh.bind(this));\n\n    this.writing = false;\n\n    // defaults configs\n    var defaults = {\n      mode: 'current', // 'write', 'query'\n      query: 'SHOW DIAGNOSTICS',\n      options: {\n        database: null\n      },\n      updateEvery: 1200\n    };\n    _.defaults(this.panel, defaults);\n\n\n    // All influxdb datasources\n    this.dbs = [];\n    _.forEach(config.datasources, (val, key) => {\n      if (\"influxdb\" == val.type) {\n        if(key == config.defaultDatasource) {\n          this.dbs.unshift(key);\n        }\n        else {\n          this.dbs.push(key);\n        }\n      }\n    });\n\n    // pick a datasource\n    if( _.isNil( this.panel.datasource ) ) {\n      if(this.dbs.length > 0) {\n        this.panel.datasource = this.dbs[0];\n      }\n    }\n    var txt = \"default\";\n    if(this.panel.options.database) {\n      txt = this.panel.options.database;\n    }\n    this.dbSeg = this.uiSegmentSrv.newSegment({value: txt})\n\n    this.queryInfo = {\n      last: 0,\n      count: 0,\n      queries: []\n    };\n\n    if(this.panel.updateEvery > 0) {\n      this.updateShowQueries();\n    }\n  }\n\n\n  isShowQueryWindow() {\n    return this.panel.mode == 'query';\n  }\n\n  isShowCurrentQueries() {\n    return this.panel.mode == 'current';\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/natel-influx-admin-panel/editor.html',1);\n    this.addEditorTab('Write Data', 'public/plugins/natel-influx-admin-panel/write.html',2);\n    this.editorTabIndex = 1;\n  }\n\n  writeData() {\n    console.log( \"WRITE\", this.writeDataText );\n    this.writing = true;\n    this.error = null;\n    return this.datasourceSrv.get(this.panel.datasource).then( (ds) => {\n      var db = this.panel.options.database;\n      if( !db) {\n        db = ds.database;\n      }\n      this.$http({\n        url: ds.urls[0] + '/write?db=' + db,\n        method: 'POST',\n        data: this.writeDataText,\n        headers: {\n          \"Content-Type\": \"plain/text\"\n        }\n      }).then((rsp) => {\n        this.writing = false;\n        console.log( \"OK\", rsp );\n      }, err => {\n        this.writing = false;\n        console.log( \"ERROR\", err );\n        this.error = err.data.error + \" [\"+err.status+\"]\";\n      });\n    });\n  }\n\n  askToKillQuery(qinfo) {\n    appEvents.emit('confirm-modal', {\n      title: 'Kill Influx Query',\n      text: 'Are you sure you want to kill this query?',\n      text2: qinfo.query,\n      icon: 'fa-trash',\n      //confirmText: 'yes',\n      yesText: 'Kill Query',\n      onConfirm: () => {\n        this.datasourceSrv.get(this.panel.datasource).then( (ds) => {\n          ds._seriesQuery( 'kill query '+qinfo.id, this.panel.options ).then( (res) => {\n            console.log( 'killed', qinfo, res );\n          });\n        });\n      }\n    });\n    return;\n  }\n\n  updateShowQueries() {\n    this.datasourceSrv.get(this.panel.datasource).then( (ds) => {\n      this.db = ds;\n      ds._seriesQuery( 'SHOW QUERIES', this.panel.options ).then( (data) => {\n        var temp = [];\n        _.forEach(data.results[0].series[0].values, (res) => {\n\n          // convert the time (string) to seconds (so that sort works!)\n          let durr = res[3];\n          let unit = durr[durr.length - 1];\n          let mag = 0;\n          if(unit=='s') {\n            mag = 1;\n          }\n          else if(unit=='m') {\n            mag = 60;\n          }\n          else if(unit=='h') {\n            mag = 60*60;\n          }\n          let secs = parseInt( durr.substring(0,durr.length-1)) * mag;\n          if(secs == 0 && 'SHOW QUERIES' == res[1]) {\n            // Don't include the current query\n            this.queryInfo.lastId = res[0];\n          }\n          else {\n            temp.push( {\n              'secs': secs,\n              'time': res[3],\n              'query': res[1],\n              'db': res[2],\n              'id': res[0]\n            });\n          }\n        });\n\n        this.queryInfo.count++;\n        this.queryInfo.last = Date.now();\n        this.queryInfo.queries = temp;\n\n        // Check if we should refresh the view\n        if( this.isShowCurrentQueries() && this.panel.updateEvery>0 ) {\n          this.queryInfo.timer = this.$timeout( () => {\n            this.updateShowQueries()\n          }, this.panel.updateEvery);\n        }\n      });\n    });\n  }\n\n  dbChanged() {\n    this.datasourceSrv.get(this.panel.datasource).then( (ds) => {\n      console.log( \"DB Changed\", this.dbSeg );\n      if(this.dbSeg.value === ds.database || this.dbSeg.value === \"default\") {\n        this.panel.options.database = null;\n      }\n      else {\n        this.panel.options.database = this.dbSeg.value;\n      }\n      this.configChanged();\n    });\n  }\n\n  configChanged() {\n    this.error = null;\n    if( this.isShowCurrentQueries() ) {\n      this.updateShowQueries();\n    }\n    else {\n      this.onSubmit();\n    }\n  }\n\n  getDBsegs() {\n    return this.datasourceSrv.get(this.panel.datasource).then( (ds) => {\n      return ds.metricFindQuery( \"SHOW DATABASES\", this.panel.options ).then((data) => {\n        var segs = [];\n        _.forEach(data, (val) => {\n          segs.push( this.uiSegmentSrv.newSegment( val.text ) );\n        });\n        return segs;\n      }, (err) => {\n        console.log( \"TODO... error???\", err);\n      });\n    });\n  }\n\n  getQueryTemplates() {\n    return [\n      { text: 'Show Databases',  click: \"ctrl.panel.query = 'SHOW DATABASES'\" },\n      { text: 'Create Database', click: \"ctrl.panel.query = 'CREATE DATABASE &quot;db_name&quot;'\" },\n      { text: 'Drop Database',   click: \"ctrl.panel.query = 'DROP DATABASE &quot;db_name&quot;'\" },\n      { text: '--' },\n      { text: 'Show Measurements', click: \"ctrl.panel.query = 'SHOW MEASUREMENTS'\" },\n      { text: 'Show Field Keys',   click: \"ctrl.panel.query = 'SHOW FIELD KEYS FROM &quot;measurement_name&quot;'\" },\n      { text: 'Show Tag Keys',     click: \"ctrl.panel.query = 'SHOW TAG KEYS FROM &quot;measurement_name&quot;'\" },\n      { text: 'Show Tag Values',   click: \"ctrl.panel.query = 'SHOW TAG VALUES FROM &quot;measurement_name&quot; WITH KEY = &quot;tag_key&quot;'\" },\n      { text: 'Drop Measurement',  click: \"ctrl.panel.query = 'DROP MEASUREMENT &quot;measurement_name&quot;'\" },\n      { text: '--' },\n      { text: 'Show Retention Policies', click: \"ctrl.panel.query = 'SHOW RETENTION POLICIES ON &quot;db_name&quot;'\" },\n      { text: 'Create Retention Policy', click: \"ctrl.panel.query = 'CREATE RETENTION POLICY &quot;rp_name&quot; ON &quot;db_name&quot; DURATION 30d REPLICATION 1 DEFAULT'\" },\n      { text: 'Drop Retention Policy',   click: \"ctrl.panel.query = 'DROP RETENTION POLICY &quot;rp_name&quot; ON &quot;db_name&quot;'\" },\n      { text: '--' },\n      { text: 'Show Continuous Queries', click: \"ctrl.panel.query = 'SHOW CONTINUOUS QUERIES'\" },\n      { text: 'Create Continuous Query', click: \"ctrl.panel.query = 'CREATE CONTINUOUS QUERY &quot;cq_name&quot; ON &quot;db_name&quot; BEGIN SELECT min(&quot;field&quot;) INTO &quot;target_measurement&quot; FROM &quot;current_measurement&quot; GROUP BY time(30m) END'\" },\n      { text: 'Drop Continuous Query',   click: \"ctrl.panel.query = 'DROP CONTINUOUS QUERY &quot;cq_name&quot; ON &quot;db_name&quot;'\" },\n      { text: '--' },\n      { text: 'Show Users',        click: \"ctrl.panel.query = 'SHOW USERS'\" },\n  //  { text: 'Create User',       click: \"ctrl.query = 'CREATE USER &quot;username&quot; WITH PASSWORD &apos;password&apos;\" },\n  //  { text: 'Create Admin User', click: \"ctrl.query = 'CREATE USER &quot;username&quot; WITH PASSWORD 'password' WITH ALL PRIVILEGES\" },\n      { text: 'Drop User',         click: \"ctrl.panel.query = 'DROP USER &quot;username&quot;'\" },\n      { text: '--' },\n      { text: 'Show Stats',       click: \"ctrl.panel.query = 'SHOW STATS'\" },\n      { text: 'Show Diagnostics', click: \"ctrl.panel.query = 'SHOW DIAGNOSTICS'\" }\n    ];\n  }\n\n  isClickableQuery() {\n    if( \"SHOW DATABASES\" == this.panel.query) {\n      return true;\n    }\n    if( \"SHOW MEASUREMENTS\" == this.panel.query) {\n      return true;\n    }\n    if( this.panel.query.startsWith( 'SHOW FIELD KEYS FROM \"')) {\n      return true;\n    }\n    return false;\n  }\n\n  onClickedResult(res) {\n    console.log( \"CLICKED\", this.panel.query, res );\n\n    if( \"SHOW DATABASES\" == this.panel.query) {\n      this.panel.query = 'SHOW MEASUREMENTS';\n      this.dbSeg = this.uiSegmentSrv.newSegment({value: res[0]});\n      this.dbChanged();\n    }\n    else if( \"SHOW MEASUREMENTS\" == this.panel.query) {\n      this.panel.query = 'SHOW FIELD KEYS FROM \"' + res[0] +'\"';\n      this.onSubmit();\n    }\n    else if( this.panel.query.startsWith( 'SHOW FIELD KEYS FROM \"')) {\n      var str = this.panel.query.split(/\"/)[1];\n      this.panel.query = 'SELECT \"' + res[0] +'\" FROM \"' + str +'\" ORDER BY time desc LIMIT 10';\n      this.onSubmit();\n    }\n    return;\n  }\n\n  checkIfEnterKeyWasPressed($event) {\n    var keyCode = $event.which || $event.keyCode;\n    if (keyCode === 13) {\n      this.onSubmit();\n    }\n  }\n\n  onSubmit() {\n    var startTime = Date.now();\n    this.error = null;\n    this.runningQuery = true;\n    this.datasourceSrv.get(this.panel.datasource).then( (ds) => {\n      console.log( 'OnSubmit', ds, this.query, this.panel.options);\n      this.db = ds;\n      ds._seriesQuery( this.panel.query, this.panel.options ).then((data) => {\n       // console.log(\"RSP\", this.query, data);\n        this.rsp = data;\n        this.runningQuery = false;\n        this.queryTime = (Date.now() - startTime) / 1000.0;\n      }, (err) => {\n       // console.log( 'ERROR with series query', err );\n        this.runningQuery = false;\n        this.error = err.message;\n        this.queryTime = (Date.now() - startTime) / 1000.0;\n      });\n    });\n  }\n\n  onPanelInitalized() {\n    //console.log(\"onPanelInitalized()\")\n    this.onSubmit();\n  }\n\n  onRender() {\n    //console.log(\"onRender\");\n  }\n\n  onRefresh() {\n    if( this.isShowCurrentQueries() ) {\n      this.updateShowQueries();\n    }\n    //console.log(\"onRefresh\");\n  }\n}\nInfluxAdminCtrl.templateUrl = 'module.html';\n\nexport {\n  InfluxAdminCtrl as PanelCtrl\n};\n\n\n"]}