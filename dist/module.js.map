{"version":3,"sources":["../src/module.js"],"names":["config","appEvents","PanelCtrl","_","moment","InfluxAdminCtrl","$scope","$injector","$q","$rootScope","$timeout","$http","datasourceSrv","get","injector","q","query","events","on","onInitEditMode","bind","onRender","onPanelInitalized","onRefresh","writing","defaults","mode","updateEvery","panel","$","extend","dbs","forEach","datasources","val","key","type","defaultDatasource","unshift","push","isNil","datasource","length","queryInfo","last","count","queries","updateShowQueries","addEditorTab","editorTabIndex","console","log","writeDataText","error","then","ds","url","urls","database","method","data","headers","rsp","err","status","qinfo","emit","title","text","text2","icon","yesText","onConfirm","_seriesQuery","id","res","temp","results","series","values","durr","unit","mag","secs","parseInt","substring","Date","now","currentQueries","timer","render","click","startTime","runningQuery","queryTime","message","templateUrl"],"mappings":"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","file":"module.js","sourcesContent":["import config from 'app/core/config';\nimport appEvents from 'app/core/app_events';\n\nimport {PanelCtrl} from  'app/plugins/sdk';\n\nimport _ from 'lodash';\nimport moment from 'moment';\n\n\nclass InfluxAdminCtrl extends PanelCtrl {\n  constructor($scope, $injector, $q, $rootScope, $timeout, $http) {\n    super($scope, $injector);\n    this.datasourceSrv = $injector.get('datasourceSrv');\n    this.injector = $injector;\n    this.q = $q;\n    this.query = \"SHOW DIAGNOSTICS\";\n    this.$timeout = $timeout;\n    this.$http = $http;\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('panel-initialized', this.onPanelInitalized.bind(this));\n    this.events.on('refresh', this.onRefresh.bind(this));\n  \n    this.writing = false;\n\n    // defaults configs\n    var defaults = {\n      mode: 'current', // 'write', 'query'\n      updateEvery: 1100\n    };\n    this.panel = $.extend(true, defaults, this.panel );\n    \n    // All influxdb datasources\n    this.dbs = [];\n    _.forEach(config.datasources, (val, key) => {\n      if (\"influxdb\" == val.type) {\n        if(key == config.defaultDatasource) {\n          this.dbs.unshift(key);\n        }\n        else {\n          this.dbs.push(key);\n        }\n      }\n    });\n\n    // pick a datasource\n    if( _.isNil( this.panel.datasource ) ) {\n      if(this.dbs.length > 0) {\n        this.panel.datasource = this.dbs[0];\n      }\n    }\n\n    this.queryInfo = {\n      last: 0,\n      count: 0,\n      queries: []\n    };\n\n    if(this.panel.updateEvery > 0) {\n      this.updateShowQueries();\n    }\n  }\n\n\n  isShowQueryWindow() {\n    return this.panel.mode == 'query';\n  }\n\n  isShowCurrentQueries() {\n    return this.panel.mode == 'current';\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/natel-influx-admin/editor.html',1);\n    this.addEditorTab('Write Data', 'public/plugins/natel-influx-admin/write.html',2);\n    this.editorTabIndex = 1;\n  }\n\n  writeData() {\n    console.log( \"WRITE\", this.writeDataText );\n    this.writing = true;\n    this.error = null;\n    return this.datasourceSrv.get(this.panel.datasource).then( (ds) => {\n      this.$http({\n        url: ds.urls[0] + '/write?db=' + ds.database,\n        method: 'POST',\n        data: this.writeDataText,\n        headers: {\n          \"Content-Type\": \"plain/text\"\n        }\n      }).then((rsp) => {\n        this.writing = false;\n        console.log( \"OK\", rsp );\n      }, err => {\n        this.writing = false;\n        console.log( \"ERROR\", err );\n        this.error = err.data.error + \" [\"+err.status+\"]\";\n      });\n    });\n  }\n\n  askToKillQuery(qinfo) {\n    appEvents.emit('confirm-modal', {\n      title: 'Kill Influx Query',\n      text: 'Are you sure you want to kill this query?',\n      text2: qinfo.query,\n      icon: 'fa-trash',\n      //confirmText: 'yes',\n      yesText: 'Kill Query',\n      onConfirm: () => {\n        this.datasourceSrv.get(this.panel.datasource).then( (ds) => {\n          ds._seriesQuery( 'kill query '+qinfo.id ).then( (res) => {\n            console.log( 'killed', qinfo, res );\n          });\n        });\n      }\n    });\n    return;\n  }\n\n  updateShowQueries() {\n    this.datasourceSrv.get(this.panel.datasource).then( (ds) => {\n      ds._seriesQuery( 'SHOW QUERIES' ).then( (data) => {\n        var temp = [];\n        _.forEach(data.results[0].series[0].values, (res) => {\n\n          // convert the time (string) to seconds (so that sort works!)\n          let durr = res[3];\n          let unit = durr[durr.length - 1];\n          let mag = 0;\n          if(unit=='s') {\n            mag = 1;\n          }\n          else if(unit=='m') {\n            mag = 60;\n          }\n          else if(unit=='h') {\n            mag = 60*60;\n          }\n          let secs = parseInt( durr.substring(0,durr.length-1)) * mag;\n\n          temp.push( {\n            'secs': secs,\n            'time': res[3],\n            'query': res[1],\n            'db': res[2],\n            'id': res[0]\n          });\n        });\n\n        this.queryInfo.count++;\n        this.queryInfo.last = Date.now();\n        this.queryInfo.queries = temp;\n        console.log(\"QUERIES\", this.currentQueries);\n\n        // Check if we should refresh the view\n        if( 'current' == this.panel.mode && this.panel.updateEvery>0 ) {\n          this.queryInfo.timer = this.$timeout( () => {\n            this.updateShowQueries()\n          }, this.panel.updateEvery);\n        }\n      });\n    });\n  }\n\n  modeChanged() {\n    this.error = null;\n    if('current' == this.panel.mode) {\n      this.updateShowQueries();\n    }\n    this.render();\n  }\n\n  getQueryTemplates() {\n    return [\n      { text: 'Show Databases',  click: \"ctrl.query = 'SHOW DATABASES'\" },\n      { text: 'Create Database', click: \"ctrl.query = 'CREATE DATABASE &quot;db_name&quot;'\" },\n      { text: 'Drop Database',   click: \"ctrl.query = 'DROP DATABASE &quot;db_name&quot;'\" },\n      { text: '--' },\n      { text: 'Show Measurements', click: \"ctrl.query = 'SHOW MEASUREMENTS'\" },\n      { text: 'Show Tag Keys',     click: \"ctrl.query = 'SHOW TAG KEYS FROM &quot;measurement_name&quot;'\" },\n      { text: 'Show Tag Values',   click: \"ctrl.query = 'SHOW TAG VALUES FROM &quot;measurement_name&quot; WITH KEY = &quot;tag_key&quot;'\" },\n      { text: '--' },\n      { text: 'Show Retention Policies', click: \"ctrl.query = 'SHOW RETENTION POLICIES ON &quot;db_name&quot;'\" },\n      { text: 'Create Retention Policy', click: \"ctrl.query = 'CREATE RETENTION POLICY &quot;rp_name&quot; ON &quot;db_name&quot; DURATION 30d REPLICATION 1 DEFAULT'\" },\n      { text: 'Drop Retention Policy',   click: \"ctrl.query = 'DROP RETENTION POLICY &quot;rp_name&quot; ON &quot;db_name&quot;'\" },\n      { text: '--' },\n      { text: 'Show Continuous Queries', click: \"ctrl.query = 'SHOW CONTINUOUS QUERIES'\" },\n      { text: 'Create Continuous Query', click: \"ctrl.query = 'CREATE CONTINUOUS QUERY &quot;cq_name&quot; ON &quot;db_name&quot; BEGIN SELECT min(&quot;field&quot;) INTO &quot;target_measurement&quot; FROM &quot;current_measurement&quot; GROUP BY time(30m) END'\" },\n      { text: 'Drop Continuous Query',   click: \"ctrl.query = 'DROP CONTINUOUS QUERY &quot;cq_name&quot; ON &quot;db_name&quot;'\" },\n      { text: '--' },\n      { text: 'Show Users',        click: \"ctrl.query = 'SHOW USERS'\" },\n      { text: 'Create User',       click: \"ctrl.query = 'CREATE USER &quot;username&quot; WITH PASSWORD 'password''\" },\n      { text: 'Create Admin User', click: \"ctrl.query = 'CREATE USER &quot;username&quot; WITH PASSWORD 'password' WITH ALL PRIVILEGES'\" },\n      { text: 'Drop User',         click: \"ctrl.query = 'DROP USER &quot;username&quot;'\" },\n      { text: '--' },\n      { text: 'Show Stats',       click: \"ctrl.query = 'SHOW STATS'\" },\n      { text: 'Show Diagnostics', click: \"ctrl.query = 'SHOW DIAGNOSTICS'\" }\n    ];\n  }\n\n  onSubmit() {\n    var startTime = Date.now();\n    this.error = null;\n    this.runningQuery = true;\n    this.datasourceSrv.get(this.panel.datasource).then( (ds) => {\n      console.log( 'ds', ds, this.query);\n      ds._seriesQuery( this.query ).then((data) => {\n        console.log(\"RSP\", this.query, data);\n        this.rsp = data;\n        this.runningQuery = false;\n        this.queryTime = (Date.now() - startTime) / 1000.0;\n      }, (err) => {\n        console.log( 'ERROR with series query', err );\n        this.runningQuery = false;\n        this.error = err.message;\n        this.queryTime = (Date.now() - startTime) / 1000.0;\n      });\n    });\n  }\n\n  onPanelInitalized() {\n    console.log(\"onPanelInitalized()\")\n  }\n\n  onRender() {\n    console.log(\"onRender\");\n  }\n\n  onRefresh() {\n    if( 'current' == this.panel.mode ) {\n      this.updateShowQueries();\n    }\n    console.log(\"onRefresh\");\n  }\n}\nInfluxAdminCtrl.templateUrl = 'module.html';\n\nexport {\n  InfluxAdminCtrl as PanelCtrl\n};\n\n\n"]}